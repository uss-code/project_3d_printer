 /* ===== ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á (‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì) ===== */
    const DEVICES = [
      { number: "01", url: "http://192.168.0.101/status" },
      { number: "02", url: "http://192.168.0.102/status" },
      { number: "03", url: "http://192.168.0.103/status" },
      { number: "04", url: "http://192.168.0.104/status" },
      { number: "05", url: "http://192.168.0.105/status" },
      { number: "06", url: "http://192.168.0.106/status" },
      { number: "07", url: "http://192.168.0.107/status" },
      { number: "08", url: "http://192.168.0.108/status" },
      { number: "09", url: "http://192.168.0.109/status" },
      { number: "10", url: "http://192.168.0.110/status" },
      { number: "11", url: "http://192.168.0.111/status" },
      { number: "12", url: "http://192.168.0.112/status" }
    ];

    /* ====== ‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ UI ====== */
    const grid = document.getElementById('grid');

    function cardTemplate(d) {
      return `
    <div class="card idle" id="dev-${d.number}">
      <div class="head">
        <div>
          <div class="subtitle">‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà: ${d.number}</div>
        </div>
        <div class="status-chip idle" data-chip>üî¥ ‡∏ß‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</div>
      </div>
      <div class="subtitle" data-msg>‡∏£‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...</div>
    </div>
  `;
    }

    /* ‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */
    grid.innerHTML = DEVICES.map(cardTemplate).join('');

    /* ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ======
       ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á payload ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
       { "status": "in-use" | "idle", "progress": 0..100 }
    */
    async function fetchStatus(device) {
      const res = await fetch(device.url, { cache: 'no-store' });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      return res.json();
    }

    /* ====== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö) ======
       POST ‡πÑ‡∏õ‡∏¢‡∏±‡∏á /status ‡∏î‡πâ‡∏ß‡∏¢ body: {status: 'in-use'|'idle'}
       ‡∏õ‡∏£‡∏±‡∏ö endpoint/‡∏ß‡∏¥‡∏ò‡∏µ‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    */
    async function sendStatus(device, next) {
      const res = await fetch(device.url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: next })
      });
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      return res.json().catch(() => ({})); // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤
    }

    /* ====== ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ====== */
    function renderCard(device, payload) {
      const card = document.getElementById(`dev-${device.number}`);
      const chip = card.querySelector('[data-chip]');
      const fill = card.querySelector('[data-fill]');
      const msg = card.querySelector('[data-msg]');

      let status = 'idle';
      if (payload && payload.status === 'in-use') status = 'in-use';
      if (payload && payload.status === 'idle') status = 'idle';

      const pct = Math.max(0, Math.min(100, Number(payload?.progress ?? (status === 'in-use' ? 50 : 0))));

      card.classList.remove('in-use', 'idle', 'offline');
      chip.classList.remove('in-use', 'idle', 'offline');

      card.classList.add(status ? status : 'offline');
      chip.classList.add(status ? status : 'offline');

      if (status === 'in-use') {
        chip.textContent = 'üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      } else if (status === 'idle') {
        chip.textContent = 'üî¥ ‡∏ß‡πà‡∏≤‡∏á/‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      } else {
        chip.textContent = '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
      }

      fill.style.width = pct + '%';
      msg.textContent = (status === 'in-use')
        ? `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå `
        : (status === 'idle')
          ? `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏ß‡πà‡∏≤‡∏á ¬∑ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏á‡∏≤‡∏ô`
          : `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠`;
    }

    /* ====== ‡∏ß‡∏ô‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥ ====== */
    async function refreshAll() {
      for (const d of DEVICES) {
        try {
          const data = await fetchStatus(d);
          renderCard(d, data);
        } catch (e) {
          renderCard(d, { status: 'offline', progress: 0 });
        }
      }
    }
    refreshAll();
    const timer = setInterval(refreshAll, 5000);

    /* ====== ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏°‡∏ö‡∏ô‡∏Å‡∏≤‡∏£‡πå‡∏î (event delegation) ====== */
    grid.addEventListener('click', async (ev) => {
      const card = ev.target.closest('.card');
      if (!card) return;
      const id = card.id.replace('dev-', '');
      const device = DEVICES.find(x => x.number === id);
      if (!device) return;

      const isToggle = ev.target.matches('[data-toggle]');
      const isSetInUse = ev.target.matches('[data-set-inuse]');
      const isSetIdle = ev.target.matches('[data-set-idle]');

      if (!(isToggle || isSetInUse || isSetIdle)) return;

      const chip = card.querySelector('[data-chip]');
      const current = chip.classList.contains('in-use') ? 'in-use'
        : chip.classList.contains('idle') ? 'idle' : 'offline';
      const next = isToggle ? (current === 'in-use' ? 'idle' : 'in-use')
        : isSetInUse ? 'in-use'
          : 'idle';

      // ‡πÅ‡∏™‡∏î‡∏á Optimistic UI
      renderCard(device, { status: next, progress: next === 'in-use' ? 1 : 0 });

      try {
        await sendStatus(device, next);
        // ‡∏î‡∏∂‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ß‡∏£‡πå
        const real = await fetchStatus(device);
        renderCard(device, real);
      } catch (e) {
        // ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á
        try {
          const real = await fetchStatus(device);
          renderCard(device, real);
          alert(`‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${e.message}`);
        } catch {
          renderCard(device, { status: 'offline', progress: 0 });
          alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÑ‡∏î‡πâ');
        }
      }
    });

    /* ====== ‡∏™‡∏•‡∏±‡∏ö Dark Mode ====== */
    document.getElementById('darkBtn').addEventListener('click', () => {
      document.body.classList.toggle('dark');
      localStorage.setItem('theme', document.body.classList.contains('dark') ? 'dark' : 'light');
    });
    (function () {
      const saved = localStorage.getItem('theme');
      if (saved === 'dark') document.body.classList.add('dark');
    })();

function init() {
    /* ‡∏ß‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô */
    grid.innerHTML = DEVICES.map(cardTemplate).join('');
}


function switch_mode() {
    if (document.getElementById("testBtn").style.backgroundColor == "blue") {
        document.getElementById("testBtn").style.backgroundColor = "gray"
    } else {
        document.getElementById("testBtn").style.backgroundColor = "blue";
    }    
}




